# This should now contain only all index specifications that are common for MARC-based items from any source
# 
id=001,first

fullrecord = FullRecordAsXML
all_fields_tsearch = custom, getAllSearchableFieldsAsSet(100, 900)
date_indexed_f_stored = dateRecordIndexed

title_tsearch_stored = 245a, cleanEnd
title_ssort_stored = 245abnp, join(" : "), clean, titleSortLower, first
title_sub_tsearch_stored = 245bnp, cleanEnd
full_title_tsearchf_stored = 245abnp, cleanEnd

title_vern_tsearch_stored = LNK245abnp:LNK700tfnp:LNK710tfnp:LNK711atfnp:LNK740anp
title_added_entry_tsearch_stored = 700tfnp:710tfnp:711atfnp:740anp
#series_title_facet = 440a:490a:800abcdqtfmnrp:810abcdftnp:811acdefnpt:830afmnrpv, clean
title_series_tsearchf_stored = 440anpv:490av?(ind1 != '1'):800tfnpv:830afnpv:810tfnpv:811tfnpv
title_notes_tsearch_stored = 505agrt
title_uniform_tsearch_stored = 130adflnp:240aflnp:730anp
title_uniform_vern_tsearch_stored = LNK130adflnp:LNK240aflnp:LNK730anp
title_alternate_tsearch_stored = 246abfnp:780st:785st:773st:111tfnp
title_alternate_vern_tsearch_stored = LNK246abfnp:LNK780st:LNK785st:LNK773st:LNK111tfnp
#new field defs taken from virgo3 ruby code
title_abbreviated_tsearch_stored = 210ab

journal_title_ssort_stored = 245ab ? (000[7] = 's' ), join(" : "), titleSortLower, first
journal_title_tsearch_stored = {245a:LNK245a} ? (000[7] = 's' )
journal_title_addnl_tsearch_stored = {245b:LNK245b:245np:130adfnp:240afnp:246abfnp:700tfnp:710tfnp:711atfnp:740anp:780st:785st:773st:111tfnp:440anp:490a:800tfnp:830afnp:810tfnp:811tfnp:505a} ? (000[7] = 's' )
#full_catalog_title_f = 245abnp?(000[6-7] matches "am|tm"), cleanEnd
full_journal_title_f = 245abnp?(000[6-7] matches "as"), cleanEnd
#full_video_title_f = 245abnp?(000[6-7] matches "gm"), cleanEnd
#full_music_recordings_title_f = 245abnp?(000[6-7] matches "jm"), cleanEnd
#full_sound_recordings_title_f = 245abnp?(000[6-7] matches "im"), cleanEnd
#full_musical_scores_title_f = 245abnp?(000[6-7] matches "cm|dm"), cleanEnd

author_tsearch = 100abcdeq4:110abcde4:111acdejnq4:LNK100abcdeq4:LNK110abcde4:LNK111acdejnq4, cleanEnd, relator_map.properties, unique
author_a = 100abcdeq4:110abcde4:111acdeq4, relator_map.properties, cleanEnd, unique
author_vern_a = LNK100ab:LNK110a:LNK111a:LNK700a:LNK710a:LNK711a, relator_map.properties, clean, unique
author_director_tsearchf_stored = custom(org.solrmarc.mixin.DirectorMixin), getVideoDirector
#author_f = 100abcdeq4:110abcde4:111acdejnq4:700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a, cleanEnd
#author_facet = 100abcdeq4:110abcde4:111acdejnq4:700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a, cleanEnd
author_facet_f_stored = 100abcdeq4:110abcde4:111acdejnq4:700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a, cleanEach, format("d=> [%d]", "e=>(%d)", "4=>(%d)"), relator_map.properties, join(" ")
author_added_entry_tsearch_stored = 700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a:LNK700abcdeq4:LNK710acdejq4:LNK711acdejq4:LNK800abcdeq4:LNK810abcde4:LNK811acdejq4:LNK773a, clean, relator_map.properties, unique
author_ssort_stored = 100abcdeq4:110abcde4:111acdeq4, titleSortLower, relator_map.properties, first
responsibility_statement_tsearch_stored=245c
responsibility_statement_vern_tsearch_stored=LNK245c
rights_tsearchf_stored=540abcd3:540f, first
rights_url_a=540u, sort(length, desc), first, clean
rights_url_a?=540abcdf3, map(".*(http[s]?://[a-zA-Z0-9/.%]*).*=>$1"), sort(length, desc), first, clean


#new field defs taken from virgo3 ruby code
target_audience_a = 521a
cartographic_math_a = 255abcdefg
description_a = 300abcefg3:538a3
located_in_a = 773astbdgh
dissertation_note_a = 502a
note_a = 500a:501a:504a
local_note_a = 590a
reproduction_note_a = 533abcdefmn
location_of_originals_a = 535abcd3
original_version_a = 534ptcnle
other_archival_materials_a = 544abcden3
performers_tsearch_stored = 511a
recording_info_a = 518adop3
author_credits_tsearch_stored = 508a
other_forms_a = 530abcdu3
terms_of_use_a = 540abcdfg3
biographical_note_a = 545ab
edition_a = 250ab
finding_aid_note_a = 555a
title_history_note_a = 580a
organization_arrangement_note_a = 351abc3
title_previous_tsearch_stored = 780abtx?(ind1 == '0')
title_later_tsearch_stored = 785abtx?(ind1 == '0')
sudoc_number_e_stored = 086a?(ind1 == '0')
awards_note_a = 586a
publication_history_a = 362a
publication_frequency_a = 310ab:321ab
department_f_stored = 590a?($a contains "Department" && 502$a matches ".*"), map("\"?\\[?(Department of)\\]?([^].\"]*).*=>$1$2"), map("(.*),?=>$1")
department_f_stored += 590a?($a contains "School" && 502$a matches ".*"), map("\"?\\[?(School of)\\]?([^].\"]*).*=>$1$2"), map("(.*),?=>$1")
access_note_a = 506abcdefgq
publisher_number_a = 028abq
references_note_a = 510abcux
citation_note_a = 524a
language_note_tsearch_stored = 546a
rights_tsearchf_stored=540abcd
rights_url_a=540u

subject_tsearchf_stored = {600[a-z]:610[a-z]:611[a-z]:630[a-z]:650[a-z]:651[a-z]:655[a-z]:690[a-z]}?(ind2!=7|(ind2 = 7 & $2 matches "fast|lcsh|tgn|aat|rbprov|rbpap|rbgenr|rbbin|rbpri|rbtyp")), join(" -- "), clean, unique
subject_summary_tsearch = 520ab
#new field defs taken from virgo3 ruby code
subject_summary_a = 520ab ? (ind1 != '3')
subject_abstract_a = 520ab ? (ind1 == '3')
subject_era_tsearchf_stored = 650d:650y:651y:655y, clean
topic_form_genre_f_stored = 650a:650b:650x:655a, clean, unique
region_f_stored = custom, getRegionFacet

#                        "Recordings and/or Scores".
recording_format_f_stored = 000[6] ? ([6] matches "[cdj]"), (map.recording_type)
map.recording_type.j = Musical
map.recording_type.i = Non-Musical
composition_era_f_stored = custom(org.solrmarc.mixin.MusicEra), getMusicEra, music_maps.properties(composition_era), filter("keepRaw", "^[a-z][0-9]$=>")
music_composition_form_tsearchf_stored = 008[18-19]:047a ? (000[6] matches "[cdj]"), music_maps.properties(composition_type)
instrument_raw_a = 048[a-z]
instrument_f_stored = 048a[0-1]:048b[0-1], instrument_map.properties, unique

medium_a = 245h, (pattern_map.medium), first
form_a = 245k, clean
date_coverage_a = 245f
date_bulk_coverage_a = 245g

pattern_map.medium.pattern_0 = [Ss]ound[ ]+recording=>sound recording
pattern_map.medium.pattern_1 = [Vv]ideo[-]?recording=>videorecording
pattern_map.medium.pattern_2 = [Ee]lectronic book=>electronic book
pattern_map.medium.pattern_3 = [Ee]lectronic [a-z]*=>electronic resource
pattern_map.medium.pattern_4 = [Mm]icro(form|film|fiche)=>microform
pattern_map.medium.pattern_5 = [Mm]icrofiche=>microform
pattern_map.medium.pattern_6 = [Ss]lide=>slide
pattern_map.medium.pattern_7 = CD=>sound recording
pattern_map.medium.pattern_8 = DVD=>videorecording
pattern_map.medium.pattern_9 = [Cc]omputer[ ]*file=>computer file
pattern_map.medium.pattern_10 = [Mm]anuscript=>manuscript
pattern_map.medium.pattern_11 = [Pp]icture=>picture
pattern_map.medium.pattern_12 = \b[Gg]raphic\b=>graphic
pattern_map.medium.pattern_13 = [Mm]ap=>cartographic material
pattern_map.medium.pattern_13 = [Cc]artographic material=>cartographic material
pattern_map.medium.pattern_14 = [Ss]eries record=>series record
pattern_map.medium.pattern_15 = [Mm]otion picture=>motion picture
pattern_map.medium.pattern_16 = [Aa]rt reproduction=>art reproduction
pattern_map.medium.pattern_17 = [Aa]rt original=>art original
pattern_map.medium.pattern_18 = [Mm]otion picture=>motion picture
pattern_map.medium.pattern_19 = ^([Cc]hart|[Kk]it|[Bb]raille|[Rr]ealia|[Gg]ame|[Ee]quipment|[Ff]ilmstrip|[Ww]ebsite|[Tt]ransparency|[Mm]odel)$=>$1

#Used for grouping and group display
work_title_a = 240a:240a:130a:245ab, clean, first
work_primary_author_a = 100aq:100aq:110a:700aq:111ac, clean, first

work_title1_key_ssort_stored =  getComplexJoinedFields("240a:240a:130a:245ab,titleSortLower, first", "100aq:100aq:110a:700aq:111ac:260ab:264ab, titleSortLower, first" ,"/"), filter("[ ]=>_")

work_title2_key_ssort_stored =  getComplexJoinedFields("240a:240a:130a:245ab,titleSortLower, first", "100aq:100aq:110a:700aq:111ac:260ab:264ab, titleSortLower, first", "getPrimaryContentType, filter(\"ContentType.=>\")", "/"), filter("[ ]=>_")

work_title3_key_ssort_stored =  getComplexJoinedFields("240a:240a:130a:245ab,titleSortLower, first", 
                                                       "custom(org.solrmarc.mixin.DirectorMixin), getVideoDirector, mapViaFormatterValue(\"titleSortLower\"), first", 
                                                       "getPrimaryContentType, filter(\"ContentType.=>\"), (map.isvideo)", "/"),
                                filter("[ ]=>_"), map(".*/not=>","(.*/video)=>$1")

map.isvideo.__DEFAULT=not
map.isvideo.Video=video
map.isvideo.MotionPicture=video

mss_work_key_ssort_stored = 999a?($a startsWith "MSS"), map("MSS (\\d\\d\\d\\d*).*=>mss_$1"), first
mss_work_key_ssort_stored ?=  getComplexJoinedFields("240a:240a:130a:245ab,titleSortLower, first", "100aq:100aq:110a:700aq:111ac, titleSortLower, first", "getPrimaryContentType, filter(\"ContentType.=>\")", "/"), filter("[ ]=>_")

isbn_isbn_stored = 020a,  custom_map(org.solrmarc.mixin.ISBNNormalizer filterISBN(both)), unique
issn_e_stored = 022a, map("([- 0-9]*[0-9Xx]).*=>$1"), unique
lccn_lccn_stored = 010a, map("([- 0-9]*[0-9Xx]).*=>$1"), unique
oclc_e_stored = 035a:035z, filter("^(?:(?:[(]OCoLC[)])|(?:[(]OCoLC[)])?(?:(?:ocm)|(?:ocn)|(?:on)))(\d+)$=>$1", "[^0-9]=>")
upc_e_stored = 024a ? (ind1 = '1' | (ind1 = '7' & $2 = "upc")), filter("[^0-9]=>"), unique

#publisher information
published_tsearch_stored = 260abc:264abc?(ind2 = 1 || ind2 = 4), cleanEnd
published_vern_tsearch_stored = LNK260abc:LNK264abc?(ind2 = 1 || ind2 = 4), cleanEnd
publisher_name_tsearch_stored = 260b:264b?(ind2 = 1 || ind2 = 4), cleanEnd
published_location_tsearch_stored = 260a:264a?(ind2 = 1 || ind2 = 4), cleanEnd

published_daterange = custom, getDateRange("[%s TO %s]", "[%s TO *]")
#published_daterange ?= 999a, map(".*(\\D\\b)(20|1[789])(\\D\\b).*=>$2"), sort(str, asc), first
published_daterange ?= 999a, map("[A-Z][A-Z0-9 ].*(\\D|\\b)(20[01]\\d|202[01]|1[789]\\d\\d)((\\D|\\b).*)=>$2"), sort(str, asc), first


published_display_a = custom, getDateRange("%s - %s", "%s - present")
#published_display_a ?= 999a, map(".*(\\D\\b)((20|1[789])\\d\\d)(\\D\\b).*=>$2"), sort(str, asc), first
published_display_a ?= 999a, map("[A-Z][A-Z0-9 ].*(\\D|\\b)(20[01]\\d|202[01]|1[789]\\d\\d)((\\D|\\b).*)=>$2"), sort(str, asc), first


#date_a = custom, getDateRange("%s-01-01T00:00:00Z", "%s-01-01T00:00:00Z"), map(keepRaw, "^(\\d\\d\\d\\d)$=>$1-01-01T00:00:00Z", "^(\\d\\d\\d\\d-\\d\\d)$=>$1-01T00:00:00Z", "^(\\d\\d\\d\\d-\\d\\d-\\d\\d)$=>$1T00:00:00Z")

published_date = custom, getSingleDate("%s-01-01T00:00:00Z", "0000-01-01T00:00:00Z")
#published_date ?= 999a, map(".*(\\D\\b)(20|1[789])(\\D\\b).*=>$2-01-01T00:00:00Z"), sort(str, asc), first
published_date ?= 999a, map("[A-Z][A-Z0-9 ].*(\\D|\\b)(20[01]\\d|202[01]|1[789]\\d\\d)((\\D|\\b).*)=>$2-01-01T00:00:00Z"), sort(str, asc), first

#date published and range
#published_daterange = 008[7-14]?((008[6] == 'i' |008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q')&& 008[11-14] != "9999"),
#         map("(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>[$1 TO $2]","(\\d\\d)uu(\\d\\d\\d\\d)=>$2","(\\d\\d\\d)u(\\d\\d\\d\\d)=>$2"), mapSwapOrderOfRange,
#         sort(str, asc), first
#published_daterange ?= 008[7-14]?((008[6] == 'e')), untrimmed,
#         map("(\\d\\d\\d\\d)(..)(..)=>$1-$2-$3"), , mapValidateDate(""), sort(str, asc), first
#published_daterange ?= {008[07-10]:008[11-14]}?((008[6] == 'c')&& 008[11-14] != "9999"),
#         map("(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>[$2 TO $1]","(\\d\\d)uu(\\d\\d\\d\\d)=>$2","(\\d\\d\\d)u(\\d\\d\\d\\d)=>$2"),
#         sort(str, asc), first
#published_daterange ?= 008[7-10]?((008[6] == 'i' | 008[6] == 'c' | 008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q' | 008[6] == 'u')&& 008[11-14] == "9999"),
#         map("(\\d\\d\\d\\d)=>[$1 TO *]","(\\d\\d)uu=>[$100 TO $199]", "(\\d\\d\\d)u=>[$10 TO $19]"),
#         sort(str, asc), first
#published_daterange ?= {008[07-10]:008[11-14]}?(008[6] == 'r' | 008[6] == 'p' | 008[6] == 'u'), map("(\\d\\d\\d\\d)=>$1"), sort(str, asc), first
#published_daterange ?= 008[7-10]?(008[6] == 's'), map(".*?(\\d\\d\\d\\d).*=>$1"), map("(.*)=>$1"), sort(str, asc), first
#published_daterange ?= 260c:264c?(ind1 = '1' || ind1 = ' '), map(".*?(\\b\\d\\d\\d\\d\\b).*=>$1"), map("(.*)=>$1"), sort(str, asc), first
#published_daterange ?= 999a, map(".*(\\d\\d\\d\\d)=>$1")
#published_daterange ?= getComplexJoinedFields("999a, map(\".*(\\b(19|20)\\d\\d\\b)=>[$1\"), sort(num, asc), first",  "999a, map(\".*(\\b(19|20)\\d\\d\\b)=>$1]\"), sort(num, desc), first", " TO ")
# published_daterange ?= getComplexJoinedFields("999a, map(\".*(\\d\\d\\d\\d)=>[$1\"), sort(num, asc), first",  "999a, map(\".*(\\d\\d\\d\\d)=>$1]\"), sort(num, desc), first", " TO ")

#published_date += 008[7-14]?((008[6] == 'i' |008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q')&& 008[11-14] != "9999"),
#         map("(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d(\\d|u)(\\d|u)u)(\\d\\d\\d\\d)=>$4-01-01T00:00:00Z","(\\d\\d\\d\\d)(\\d(\\d|u)(\\d|u)u)=>$1-01-01T00:00:00Z"),
#         sort(str, asc), first
#published_date += 008[7-14]?((008[6] == 'e')), untrimmed, 
#         map("(....)(..)(..)=>$1-$2-$3"), mapValidateDate("1900-01-01T00:00:00Z")
#         sort(str, asc), first
#published_date += {008[07-10]:008[11-14]}?((008[6] == 'c')&& 008[11-14] != "9999"),
#         map("(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d\\d\\d)u=>$10-01-01T00:00:00Z","(\\d\\d)uu=>$100-01-01T00:00:00Z"),
#         sort(str, asc), first
#published_date += 008[7-10]?((008[6] == 'i' | 008[6] == 'c' | 008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q' | 008[6] == 'u' | 008[6] == 'n')&& 008[11-14] == "9999"),
#         map("(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d\\d)uu=>$150-06-01T00:00:00Z", "(\\d\\d\\d)u=>$15-06-01T00:00:00Z"),
#         sort(str, asc), first
#published_date ?= {008[07-10]:008[11-14]}?(008[6] == 'r' | 008[6] == 'p' | 008[6] == 'u' | 008[6] == 's' | 008[6] == ' ' | 008[6] == 'n' | 008[6] == 'q'),
#         map("(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d\\d\\d)u=>$15-06-01T00:00:00Z","(\\d\\d)uu=>$150-06-01T00:00:00Z"),
#         sort(str, asc), first
#published_date ?= 260c:264c?(ind1 = '1' || ind1 = ' '),  map(".*?\\bc?(\\d\\d\\d\\d)\\b.*=>$1-01-01T00:00:00Z"), sort(str, asc), first
#
#published_date ?= 999a, map(".*(\\b(1[789]|20)\\d\\d\\b)=>$1-01-01T00:00:00Z"), sort(num, asc), first


#url_str_stored = custom(org.solrmarc.mixin.UrlMixin), getFullTextUrls
#url_supp_str_stored = custom(org.solrmarc.mixin.UrlMixin), getSupplUrls

#url_labelled_str_stored = custom, getLabelledURLnew("")
#url_labelled_supp_str_stored = custom, getLabelledSupplURLnew("")

url_str_stored = custom(org.solrmarc.mixin.UrlMixin), getLabelledURLnew("Access Online"), map("(.*)[|][|].*=>$1"), notunique
url_supp_str_stored = custom(org.solrmarc.mixin.UrlMixin),  getLabelledSupplURLnew("Related Material"), map("(.*)[|][|].*=>$1"), notunique

url_label_str_stored = custom, getLabelledURLnew("Access Online"), map(".*[|][|](.*)=>$1 "), notunique
url_label_supp_str_stored = custom, getLabelledSupplURLnew("Related Material"), map(".*[|][|](.*)=>$1 "), notunique


# special field for video material
release_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getOriginalReleaseDate
video_run_time_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoRunTime
video_rating_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoRating
video_target_audience_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoTargetAudience
# appears above as "author_director_tsearchf_stored"
#video_director_tsearch_stored = custom(org.solrmarc.mixin.DirectorMixin), getVideoDirector
video_genre_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoGenre


# facets

format_f_stored = custom(org.solrmarc.mixin.GetFormatMixin), getContentTypesAndMediaTypes, getformat_mixin_map.properties, unique
video_format_f_stored = custom(org.solrmarc.mixin.GetFormatMixin), getContentTypesAndMediaTypes, getvideoformat_mixin_map.properties, unique

language_f_stored = 008[35-37]:041a:041d , language_map.properties, unique, first
language_f_stored += 041a:041d , language_map.properties, unique, notfirst, map("^(.*$)=>$1 (also in)")
language_f_stored += 041b ? (000[6] matches "[at]") , language_map.properties, map("^(.*$)=>$1 (summary in)")
language_f_stored += 041b ? (!(000[6] matches "[at]")) , language_map.properties, map("^(.*)$=>$1 (subtitles in)")
language_f_stored += 041h ? (000[6] = "g") , language_map.properties, map("^(.*)$=>$1 (dubbed in)")
language_f_stored += 041h ? (000[6] != "g") , language_map.properties, map("^(.*)$=>$1 (translated from)")

# special Call Number fields to handle COUTTS PDA items
#call_number_orig_display = custom, getCallNumbersCleanedNew(true), (map.call_number_coutts)
shelfkey = custom, getUniquishLCShelfKey(unique)
reverse_shelfkey = custom, getUniquishReverseLCShelfKey(unique)
lc_call_number_e_stored = custom, getTrimmedUniquishLCCallNumber

call_number_broad_f_stored =  custom, getCallNumberPrefixNew(callnumber_map.properties, 1) 
# getCallNumberPrefixNew - selects a single 'best' LC callnumber from the 999a subfield and the 050ab subfields
#                          and then uses the callnumber_map to map only the first letter of the LC call number
#                          to the broad LC subject description for that single letter.
call_number_narrow_f_stored = custom, getCallNumberPrefixNew(call_number_detail_map.properties, 0)
# getCallNumberPrefixNew - as above, selects a single 'best' LC callnumber from the 999a subfield and the 050ab subfields
#                          but then uses the a different, more detailed callnumber_map to map the first two letters of 
#                          the first letter of the LC call number to a more detailed LC subject description.  Additionally
#                          for a few two letter combinations, (E, F, GV, PN and Z) the number following the initial letters
#                          are used to further refine the LC subject description. 
#                          to the broad description for that single letter.

call_number_a = custom, getCallNumbersCleanedNewNo050(true)
call_number_tsearch = custom, getCallNumbersCleanedNew(false)
call_number_ssort_stored=  custom, getCallNumberCleanedNew(sortable)

leader67_f_stored = 000[6-7]

type_of_record_f_stored = 000[6], untrimmed, (map.type)
map.type.a = Language material
map.type.c = Notated music
map.type.d = Manuscript notated music
map.type.e = Cartographic material
map.type.f = Manuscript cartographic material
map.type.g = Projected medium
map.type.i = Nonmusical sound recording
map.type.j = Musical sound recording
map.type.k = Two-dimensional nonprojectable graphic
map.type.m = Computer file
map.type.o = Kit
map.type.p = Mixed materials
map.type.r = Three-dimensional artifact or naturally occurring object
map.type.t = Manuscript language material
map.type.throwExceptionIfMissing=true

biblevel_f_stored = 000[7], untrimmed, (map.biblevel)
map.biblevel.a = Monographic component part
map.biblevel.b = Serial component part
map.biblevel.c = Collection
map.biblevel.d = Subunit
map.biblevel.i = Integrating resource+
map.biblevel.m = Monograph/Item
map.biblevel.s = Serial
map.biblevel.throwExceptionIfMissing=true

media_type_f_stored = getMediaTypes
media_type_mapped_f_stored = getMediaTypes, equipment_from_format.properties, unique

pool_f_stored = 502a, map(".*=>thesis")
pool_f_stored ?= 000[6-7], untrimmed, (map.pool)
pool_f_stored ?= 000[6], untrimmed, (map.poolbroad)

map.poolbroad.c = musical_scores
map.poolbroad.d = musical_scores
map.poolbroad.e = maps
map.poolbroad.f = maps
map.poolbroad.g = video
map.poolbroad.i = sound_recordings
map.poolbroad.j = music_recordings
map.poolbroad.a = catalog
map.poolbroad.b = catalog
map.poolbroad.m = catalog
map.poolbroad.k = catalog
map.poolbroad.o = catalog
map.poolbroad.r = catalog
map.poolbroad.p = archival
map.poolbroad.t = archival
map.poolbroad.__DEFAULT = unassigned

map.pool.am = catalog
map.pool.tm = catalog
map.pool.as = serials
map.pool.ab = serials
map.pool.ac = archival


